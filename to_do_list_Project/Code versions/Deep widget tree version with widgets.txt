import 'package:flutter/material.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'Animated To-Do List',
      theme: ThemeData(primarySwatch: Colors.blue),
      home: ToDoListPage(),
    );
  }
}

class ToDoListPage extends StatefulWidget {
  @override
  _ToDoListPageState createState() => _ToDoListPageState();
}

class _ToDoListPageState extends State<ToDoListPage>
    with SingleTickerProviderStateMixin {
  List<String> tasks = [];
  final TextEditingController taskController = TextEditingController();

  bool _showList = true; // For AnimatedCrossFade
  double _opacity = 1.0; // For AnimatedOpacity
  double _height = 80; // For AnimatedContainer

  late AnimationController _animationController;

  @override
  void initState() {
    super.initState();
    // AnimationController - Optional
    _animationController = AnimationController(
      vsync: this,
      duration: const Duration(seconds: 1),
    );
  }

  void addTask() {
    if (taskController.text.isNotEmpty) {
      setState(() {
        tasks.add(taskController.text);
        taskController.clear();
        _opacity = 0.0;
      });
      // Fade-in animation
      Future.delayed(Duration(milliseconds: 200), () {
        setState(() {
          _opacity = 1.0;
        });
      });
    }
  }

  void deleteTask(int index) {
    setState(() {
      tasks.removeAt(index);
      _animationController.forward(from: 0); // trigger optional animation
    });
  }

  void toggleView() {
    setState(() {
      _showList = !_showList;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Animated To-Do List'),
        centerTitle: true,
      ),
      body: Column(
        children: [
          // AnimatedContainer for smooth height change
          AnimatedContainer(
            duration: Duration(milliseconds: 500),
            curve: Curves.easeInOut,
            height: _height,
            width: double.infinity,
            color: Colors.blue[50],
            padding: EdgeInsets.symmetric(horizontal: 16),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Text(
                  'Tasks: ${tasks.length}',
                  style: TextStyle(fontSize: 18),
                ),
                IconButton(
                  icon: Icon(Icons.expand),
                  onPressed: () {
                    setState(() {
                      _height = _height == 80 ? 150 : 80;
                    });
                  },
                )
              ],
            ),
          ),

          Expanded(
            child: AnimatedCrossFade(
              duration: Duration(milliseconds: 600),
              firstChild: tasks.isEmpty
                  ? Center(child: Text('No tasks yet. Add one!'))
                  : ListView.builder(
                      itemCount: tasks.length,
                      itemBuilder: (context, index) {
                        return AnimatedOpacity(
                          opacity: _opacity,
                          duration: Duration(milliseconds: 500),
                          child: Card(
                            margin: EdgeInsets.symmetric(
                                horizontal: 10, vertical: 5),
                            child: ListTile(
                              title: Text(tasks[index]),
                              trailing: IconButton(
                                icon:
                                    Icon(Icons.delete, color: Colors.redAccent),
                                onPressed: () => deleteTask(index),
                              ),
                            ),
                          ),
                        );
                      },
                    ),
              secondChild: Center(
                  child: Text(
                'List Hidden ðŸ‘€',
                style: TextStyle(fontSize: 20, color: Colors.grey),
              )),
              crossFadeState: _showList
                  ? CrossFadeState.showFirst
                  : CrossFadeState.showSecond,
            ),
          ),
        ],
      ),
      floatingActionButton: Column(
        mainAxisAlignment: MainAxisAlignment.end,
        children: [
          FloatingActionButton(
            heroTag: 'toggle',
            onPressed: toggleView,
            mini: true,
            child: Icon(Icons.flip),
          ),
          SizedBox(height: 10),
          FloatingActionButton(
            heroTag: 'add',
            onPressed: () => showDialog(
              context: context,
              builder: (context) {
                return AlertDialog(
                  title: const Text('Add New Task'),
                  content: TextField(
                    controller: taskController,
                    decoration: InputDecoration(hintText: 'Enter task name'),
                  ),
                  actions: [
                    TextButton(
                        onPressed: () => Navigator.pop(context),
                        child: const Text('Cancel')),
                    ElevatedButton(
                      onPressed: () {
                        addTask();
                        Navigator.pop(context);
                      },
                      child: const Text('Add'),
                    ),
                  ],
                );
              },
            ),
            child: Icon(Icons.add),
          ),
        ],
      ),
    );
  }
}
